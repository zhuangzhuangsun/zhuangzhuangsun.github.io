{"meta":{"title":"韭菜熟了","subtitle":null,"description":null,"author":"mike","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"环境变量","slug":"环境变量","date":"2019-04-19T04:46:05.000Z","updated":"2019-04-19T07:10:13.342Z","comments":false,"path":"2019/04/19/环境变量/","link":"","permalink":"http://yoursite.com/2019/04/19/环境变量/","excerpt":"","text":"全局变量和局部变量bash shell用环境变量的特性来存储有关shell会话和工作环境的信息。在bash shell中，环境变量分为两类： 全局变量 局部变量 linxu系统在开始bash会话时就设置了一些全局环境变量。123456789env #查看所有全局变量printenv #查看所有全局变量$ printenv HOME # printenv命令也可以用来查看某个全局变量/home/mike$ echo $HOME #echo 命令不仅显示某个局部变量的值 同时让变量作为命令行参数/home/mikeset #set命令显示为某个特定进程设置的所有环境变量 包括局部变量 全局变量 以及用户自定义变量 用户自定义变量123456$ my_variable='Hello world'#变量名 等号 值之间不能有空格 值为含有空格的字符串 要用单引号括起来$ echo my_variableHello worle$ export my_variable #将局部变量导出到全局环境中unset my_variable #删除环境变量 子shell无法使用父shell中设置的用户自定义变量，在子shell中设置了局部变量，一旦退出子shell 这个局部变量便不可用。 在设定全局环境变量的进程所创建的子进程中，该变量均为可见的。修改或者删除子shell中的全局环境变量的值并不会影响到父shell中该变量的值。子shell无法使用export命令改变父shell中全局环境变量的值。 PATH环境变量设置当在shell命令行中输入一个外部命令时，shell必须搜索系统来找到对应的程序。PATH环境变量定义了用于进行命令和程序查找的目录 12$ echo $PATH #PATH中的目录间用冒号分隔/home/mike/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin 问题是应用程序放置可执行文件的目录常常不在PATH所包含的目录中。解决方法是保证PATH中包含了所有存放应用程序的目录。可以把新的搜索目录添加到现有的PATH目录中。无需从头定义。只需要引用原来的值，再给这个字符串添加新目录就可以了。1234567$ echo $PATH/home/mike/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin$$ PATH=$PATH:/home/mike/Scripts$$ echo $PATH/home/mike/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/mike/Scripts 通常的办法是将单点符加入PATH环境变量中，单点符代表当前目录。1PATH=$PATH:. 对PATH变量的修改只能持续到推出或者重启系统，并不能一直持续 系统环境变量当登陆linux系统时，bash shell会作为登陆shell启动，登陆shell会从5个不同的启动文件中读取命令： /ect/profile $HOME/.bash_profile $HOME/.bashrc $HOME/.bash_login $HOME/.profile /ect/profile文件是系统默认的bash shell的主启动文件，每个用户登陆时都会执行这个启动文件。另外四个是启动文件是针对用户的。大多数linux发行版只用到其中的一两个。shell会按照下列顺序运行第一个被找到的文件，其他的被忽略： $HOME/.bash_profile $HOME/.bash_login $HOME/.profile这个列表中并没有- $HOME/.bashrc，因为该文件同从是通过其他文件启动的。 交互式shell(比如是在命令行提示符下敲入bash时启动)，只会检查 $HOME/.bashrc 文件非交互式shell(系统执行shell脚本时用的shell) bash shell 提供了BASH_ENV环境变量来为其提供查看启动文件的路径。若该变量没有被设置，由于子shell可以继承父shell导出的环境变量。如果父shell是登陆shell,则执行该脚本的子shell就可以继承登陆shell设置过并导出的变量。","categories":[{"name":"computer system","slug":"computer-system","permalink":"http://yoursite.com/categories/computer-system/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"系统管理命令","slug":"系统管理命令","date":"2019-04-18T12:22:49.000Z","updated":"2019-04-18T13:33:23.036Z","comments":false,"path":"2019/04/18/系统管理命令/","link":"","permalink":"http://yoursite.com/2019/04/18/系统管理命令/","excerpt":"","text":"监测进程1234ps -ef # 查看系统允许的所有进程top # 实时显示进程信息 按q退出kill UID #杀死指定进程号的进程 你必须为此进程的属主或root用户killall #结束所有进程 监测磁盘空间12345678mount -t type device directory #手动挂载媒体设备的基本命令mount -t vfat /dev/sdb1 /media/disk #手动将u盘/dev/sdb1挂载到/media/diskumount [directory|device] #卸载设备 只能在设备没有被占用的时候卸载umount /home/rich/mnt #卸载mnt设备df -h # 显示某个设备上还有多少磁盘空间du -ch #显示某个特定目录的磁盘使用情况 默认为当前目录du -s #显示某个特定目录的每个输出参数的总计 排序数据12sort -n file #将数字识别为数字 并按值排序sort -M file #将含有时间戳日期的文件按月份排序 搜索数据123456grep [options] pattern [file] #grep 命令行格式$ grep three filethree$ grep t file1twothree 压缩数据12345$ gzip my*$ ls -l my*-rwxrwxr-x 1 rich rich 2197 2007-09-13 11:29 myprog.gz-rwxrwxr-x 1 rich rich 5178 2007-09-13 11:29 myscript.gz-rwxrwxr-x 1 rich rich 60 2007-09-13 11:29 myscript2.gz 归档数据123tar -cvf test.tar test/ test2/ #创建名为test.tar的归档文件 含有test 和test2目录内容tar -tf test.tar #查看tar文件test.tar中的内容tar -xvf # 从tar文件中提取内容 在当前目录下重建","categories":[{"name":"computer system","slug":"computer-system","permalink":"http://yoursite.com/categories/computer-system/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"引用和指针的区别","slug":"引用和指针的区别","date":"2019-04-18T11:12:45.000Z","updated":"2019-04-18T11:40:43.144Z","comments":false,"path":"2019/04/18/引用和指针的区别/","link":"","permalink":"http://yoursite.com/2019/04/18/引用和指针的区别/","excerpt":"","text":"123int ival =1024; //初始化 int类型数据int *pi = &amp;ival; // pointer初始化 pi指向一个int对象int &amp;rval = ival; //reference 引用 代表一个int对象 通过by reference将对象作为函数参数传入时，函数可直接对传入的对象进行修改，也可以降低复制大型对象的负担。 也可以将对象以pointer的形式传递给函数，这与reference效果相同：传递的都是对象的地址，而不是整个对象的副本。两者区别为用法不同。 point参数和reference参赛之间更重要的差异是： pointer可能（也可能不）指向某个实际对象，当我们提领pointer时，一定要确定其值非0，而reference则必定会指向某个对象（不为null），所以不必作此检查 引用被创建的同时必须被初始化（指针则可以在任何时候被初始化） 一旦引用被初始化，就不能改变引用的关系，即不能再指向其他对象（指针则可以随时改变所指的对象）","categories":[{"name":"program lauguage","slug":"program-lauguage","permalink":"http://yoursite.com/categories/program-lauguage/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"文件系统操作","slug":"文件系统操作","date":"2019-04-18T08:39:22.000Z","updated":"2019-04-18T10:08:46.984Z","comments":false,"path":"2019/04/18/文件系统操作/","link":"","permalink":"http://yoursite.com/2019/04/18/文件系统操作/","excerpt":"","text":"遍历目录1cd destiantion #cd 加目录名 可切换到目标目录 change dictionary destiantion可用相对目录和绝对目录来表示绝对目录路径以正斜线/开始，正斜线表示根目录，也可以～开始 表示家目录相对路径为基于当前位置的目标文件路径 单点符.表示当前目录 双点符表示当前目录的父目录。1pwd #print work dictionary 显示当前目录 基本列表功能12345ls #list 显示当前目录下的文件和目录ls -F # -F参数在目录名后加了正斜线/ 便于区分文件和目录ls -a # 显示所有文件 包括隐藏文件ls -R #列出当前目录下包含的子目录中的文件ls -l #显示长列表 每一行都包括一个文件的许多信息 处理文件123touch test #创建一个空的文件cp source destination # copy复制文件mv source destination #move 用来重命名或者移动文件 文件夹 处理目录12345mkdir 目录名 #新建一个目录mkdir -p #同时创建多个目录和子目录rmdir 目录名 #删除目录 默认只删除空目录rm -ir #删除目录及其所有内容tree #以树状图的形式显示目录子目录及其中的文件 需要手动安装 查看文件内容1234file my_file #查看文件类型cat test1 # 查看整个文件内容tail -n text #显示文件的最后n行head -n text #显示文件的前n行","categories":[{"name":"computer system","slug":"computer-system","permalink":"http://yoursite.com/categories/computer-system/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"frist blog","slug":"frist-blog","date":"2019-04-17T04:36:48.000Z","updated":"2019-04-18T09:17:04.364Z","comments":false,"path":"2019/04/17/frist-blog/","link":"","permalink":"http://yoursite.com/2019/04/17/frist-blog/","excerpt":"","text":"星期三, 17. 四月 2019 12:40下午my fist blog mike","categories":[{"name":"diary","slug":"diary","permalink":"http://yoursite.com/categories/diary/"}],"tags":[{"name":"-炮姐 -动漫","slug":"炮姐-动漫","permalink":"http://yoursite.com/tags/炮姐-动漫/"}]},{"title":"hexo基本操作","slug":"hexo-baseic","date":"2019-04-17T04:36:48.000Z","updated":"2019-04-18T11:42:49.352Z","comments":false,"path":"2019/04/17/hexo-baseic/","link":"","permalink":"http://yoursite.com/2019/04/17/hexo-baseic/","excerpt":"","text":"hexo cleanhexo ghexo shexo dhexo new “”星期三, 17. 四月 2019 11:13下午","categories":[{"name":"web","slug":"web","permalink":"http://yoursite.com/categories/web/"}],"tags":[{"name":"-hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}